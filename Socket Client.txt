import socket
import random
import xml.etree.ElementTree as ET


class ITStudent:
    def __init__(self, name, student_id, programme, courses):
        self.name = name
        self.student_id = student_id
        self.programme = programme
        self.courses = courses

    def calculate_average_mark(self):
        total_marks = sum(course['mark'] for course in self.courses)
        return total_marks / len(self.courses)

    def is_pass(self):
        average_mark = self.calculate_average_mark()
        return average_mark >= 50


def generate_student():
    student_id = str(random.randint(10000000, 99999999))
    programme = random.choice(['BSc', 'MSc', 'PhD'])
    courses = []
    for _ in range(random.randint(1, 5)):
        course_code = random.randint(100, 999)
        course_mark = random.randint(0, 100)
        courses.append({'code': course_code, 'mark': course_mark})
    return ITStudent('John Doe', student_id, programme, courses)


def create_xml(student):
    root = ET.Element('Student')
    name_element = ET.SubElement(root, 'Name')
    name_element.text = student.name
    id_element = ET.SubElement(root, 'ID')
    id_element.text = student.student_id
    programme_element = ET.SubElement(root, 'Programme')
    programme_element.text = student.programme
    courses_element = ET.SubElement(root, 'Courses')
    for course in student.courses:
        course_element = ET.SubElement(courses_element, 'Course')
        code_element = ET.SubElement(course_element, 'Code')
        code_element.text = str(course['code'])
        mark_element = ET.SubElement(course_element, 'Mark')
        mark_element.text = str(course['mark'])
    return ET.tostring(root).decode()


def send_student_data(student, server_address):
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect(server_address)
    xml_data = create_xml(student)
    client_socket.sendall(xml_data.encode())
    client_socket.close()


server_address = ('localhost', 5000)
student_count = 10

for i in range(1, student_count + 1):
    student = generate_student()
    send_student_data(student, server_address)
    print(f"Producer sent student {i}")

print("Producer finished producing")
