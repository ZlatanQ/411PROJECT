
import threading
import random
import xml.etree.ElementTree as ET


class ITStudent:
    def __init__(self, name, student_id, programme, courses):
        self.name = name
        self.student_id = student_id
        self.programme = programme
        self.courses = courses

    def calculate_average_mark(self):
        total_marks = sum(course['mark'] for course in self.courses)
        return total_marks / len(self.courses)

    def is_pass(self):
        average_mark = self.calculate_average_mark()
        return average_mark >= 50


buffer = []
buffer_size = 10
semaphore = threading.Semaphore()


class Producer(threading.Thread):
    def run(self):
        student_count = 10
        for i in range(1, student_count + 1):
            student = generate_student()
            xml_data = create_xml(student)
            file_name = f'student{i}.xml'
            with open(file_name, 'w') as file:
                file.write(xml_data)
            with semaphore:
                buffer.append(i)

        print("Producer finished producing")


class Consumer(threading.Thread):
    def run(self):
        while True:
            with semaphore:
                if len(buffer) == 0:
                    if Producer.is_alive():
                        continue
                    else:
                        break
                file_number = buffer.pop(0)
            file_name = f'student{file_number}.xml'
            student = read_xml(file_name)
            average_mark = student.calculate_average_mark()
            passed = student.is_pass()

            print(f"Student Name: {student.name}")
            print(f"Student ID: {student.student_id}")
            print(f"Programme: {student.programme}")
            print("Courses:")
            for course in student.courses:
                print(f"{course['code']}: {course['mark']}")
            print(f"Average Mark: {average_mark}")
            print(f"Passed: {'Yes' if passed else 'No'}")
            print()

            # Clear the xml file
            with open(file_name, 'w') as file:
                file.write('')

        print("Consumer finished consuming")


def generate_student():
    student_id = str(random.randint(10000000, 99999999))
    programme = random.choice(['BSc', 'MSc', 'PhD'])
    courses = []
    for _ in range(random.randint(1, 5)):
        course_code = random.randint(100, 999)
        course_mark = random.randint(0, 100)
        courses.append({'code': course_code, 'mark': course_mark})
    return ITStudent('Ncamiso Msibi', student_id, programme, courses)


def create_xml(student):
    root = ET.Element('Student')
    name_element = ET.SubElement(root, 'Name')
    name_element.text = student.name
    id_element = ET.SubElement(root, 'ID')
    id_element.text = student.student_id
    programme_element = ET.SubElement(root, 'Programme')
    programme_element.text = student.programme
    courses_element = ET.SubElement(root, 'Courses')
    for course in student.courses:
        course_element = ET.SubElement(courses_element, 'Course')
        code_element = ET.SubElement(course_element, 'Code')
        code_element.text = str(course['code'])
        mark_element = ET.SubElement(course_element, 'Mark')
        mark_element.text = str(course['mark'])
    return ET.tostring(root).decode()


def read_xml(file_name):
    tree = ET.parse(file_name)
    root = tree.getroot()
    name_element = root.find('Name')
    id_element = root.find('ID')
    programme_element = root.find('Programme')
    courses_element = root.find('Courses')
    courses = []
    for course_element in courses_element.findall('Course'):
        code_element = course_element.find('Code')
        mark_element = course_element.find('Mark')
        courses.append({'code': int(code_element.text), 'mark': int(mark_element.text)})
    return ITStudent(name_element.text, id_element.text, programme_element.text, courses)


producer = Producer()
consumer = Consumer()

producer.start()
consumer.start()

producer.join()
consumer.join()

